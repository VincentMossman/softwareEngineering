/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package PosPanels;

import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import DAOs.CurrentUserDB;
import pos.User;
import java.io.File;
import java.util.Calendar;

/**
 *
 * @author Omer
 */
public class LoginPanel extends javax.swing.JPanel {

    /**
     * Creates new form LoginPanel
     * @param m
     */
    
    public LoginPanel(MainFrame m) {

        try {
            image =ImageIO.read(new File(this.getClass().getClassLoader().getResource("").getPath()+"Commons\\WelcomeScreen.jpg"));
        } catch (IOException ex) {
            Logger.getLogger(LoginPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        Login= new CurrentUserDB();
        mainframe = m;
        initComponents();
        mainframe.addWindowListener( new WindowAdapter() {        
        @Override
        public void windowOpened( WindowEvent e ){
            usernameInput.requestFocus();
        }}); 
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        usernameInput = new javax.swing.JTextField();
        UsernameTitle = new javax.swing.JLabel();
        PasswordTitle = new javax.swing.JLabel();
        invalidEntryLabel = new javax.swing.JLabel();
        passwordInput = new javax.swing.JPasswordField();
        LoginBtn = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(1000, 600));
        setName("Login Screen"); // NOI18N

        usernameInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                usernameInputKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                usernameInputKeyReleased(evt);
            }
        });

        UsernameTitle.setText("Username");

        PasswordTitle.setText("Password");

        invalidEntryLabel.setVisible(false);
        invalidEntryLabel.setText("Invalid username or password!");

        passwordInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                passwordInputKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                passwordInputKeyReleased(evt);
            }
        });

        LoginBtn.setText("Login");
        LoginBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoginBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(368, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(invalidEntryLabel)
                        .addGap(40, 40, 40)
                        .addComponent(LoginBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PasswordTitle)
                            .addComponent(UsernameTitle))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(usernameInput, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE)
                            .addComponent(passwordInput))))
                .addGap(348, 348, 348))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(224, 224, 224)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UsernameTitle)
                    .addComponent(usernameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PasswordTitle)
                    .addComponent(passwordInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(invalidEntryLabel)
                    .addComponent(LoginBtn))
                .addContainerGap(281, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        g.drawImage(image, 0,0, this);
    }
    private void usernameInputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_usernameInputKeyPressed
        if (evt.getKeyCode()==KeyEvent.VK_ENTER){
            LoginBtn.doClick();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_usernameInputKeyPressed
    private void passwordInputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordInputKeyPressed
        if (evt.getKeyCode()==KeyEvent.VK_ENTER){
            LoginBtn.doClick();
    }//GEN-LAST:event_passwordInputKeyPressed
    }
    private void LoginBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoginBtnActionPerformed
        password = passwordInput.getText();
        username = usernameInput.getText();        
        if(Login.login(username, password))
        {
            try {
                user=Login.getUser();
                mainframe.setCurrentUser(user);
                mainframe.frameReset();
                mainframe.getContentPane().add(new AccessLevelP(mainframe));
                mainframe.getContentPane().revalidate();
                CreateDBDir(user);
            } catch (SQLException ex) {
                Logger.getLogger(LoginPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else {
            invalidEntryLabel.setVisible(true);
            usernameInput.setText("");
            passwordInput.setText("");
            usernameInput.requestFocus();
        }
    }//GEN-LAST:event_LoginBtnActionPerformed
    public void CreateDBDir(User user){
        
        File userDir = new File(this.getClass().getClassLoader()
                .getResource("").getPath()+"/DataBases//UsersDB/"+user.getUsername());
        File monthDir = new File(this.getClass().getClassLoader()
                .getResource("").getPath()+"/DataBases//UsersDB//"+user.getUsername()+"/"+
                Calendar.getInstance().get(Calendar.MONTH));
        if (!userDir.exists()){
            userDir.mkdir();
            monthDir.mkdir();
        }else{
             if (!monthDir.exists())monthDir.mkdir();
        }
        mainframe.setUserDBPath(this.getClass().getClassLoader()
                .getResource("").getPath()+"/DataBases//UsersDB//"+user.getUsername()+"/"+
                Calendar.getInstance().get(Calendar.MONTH));
    }
    private void usernameInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_usernameInputKeyReleased
        if (evt.getKeyCode()==KeyEvent.VK_QUOTE){
            usernameInput.setText(usernameInput.getText().replaceAll("'", ""));}
    }//GEN-LAST:event_usernameInputKeyReleased

    private void passwordInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordInputKeyReleased
        if (evt.getKeyCode()==KeyEvent.VK_QUOTE){
            passwordInput.setText(passwordInput.getText().replaceAll("'", ""));}
    }//GEN-LAST:event_passwordInputKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton LoginBtn;
    private javax.swing.JLabel PasswordTitle;
    private javax.swing.JLabel UsernameTitle;
    private javax.swing.JLabel invalidEntryLabel;
    private javax.swing.JPasswordField passwordInput;
    private javax.swing.JTextField usernameInput;
    // End of variables declaration//GEN-END:variables
    private String password,username;
    private final CurrentUserDB Login;
    private User user;
    private final MainFrame mainframe;
    private BufferedImage image;
}
