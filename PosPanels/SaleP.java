/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package PosPanels;

import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import pos.InventoryItem;
import DAOs.SaleDB;
import pos.User;
import java.io.File;
import static javax.swing.JOptionPane.INFORMATION_MESSAGE;

/**
 *
 * @author Omer
 */
public class SaleP extends javax.swing.JPanel {
    /**
     * Creates new form SalesMainP
     * @param mainframe
     */
    public SaleP(MainFrame mainframe) {
        this.mainframe=mainframe;
        initComponents();
        initComponents2();       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lookupItemL = new javax.swing.JLabel();
        itemNameL = new javax.swing.JLabel();
        itemCatL = new javax.swing.JLabel();
        itemDescL = new javax.swing.JLabel();
        itemQntyL = new javax.swing.JLabel();
        findItemIDT = new javax.swing.JTextField();
        itemNameT = new javax.swing.JTextField();
        itemCatT = new javax.swing.JTextField();
        itemDescP = new javax.swing.JScrollPane();
        itemDescT = new javax.swing.JTextArea();
        itemQnty = new javax.swing.JSpinner();
        findItemB = new javax.swing.JButton();
        addToCartB = new javax.swing.JButton();
        itemPriceL = new javax.swing.JLabel();
        itemFoundT = new javax.swing.JTextField();
        itemTotalL = new javax.swing.JLabel();
        itemPriceT = new javax.swing.JTextField();
        cartTableP = new javax.swing.JScrollPane();
        cartItemsTable = new javax.swing.JTable();
        removeItemL = new javax.swing.JLabel();
        removeQnty = new javax.swing.JSpinner();
        removeItemB = new javax.swing.JButton();
        removeItem2B = new javax.swing.JButton();
        cartItemsL = new javax.swing.JLabel();
        cartTotalL = new javax.swing.JLabel();
        cartTotalT = new javax.swing.JTextField();
        SaleB = new javax.swing.JButton();
        cancelSaleB = new javax.swing.JButton();
        logoutB = new javax.swing.JButton();
        backB = new javax.swing.JButton();
        itemTotalPriceT = new javax.swing.JTextField();
        clearB = new javax.swing.JButton();
        emptyCart = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(1000, 600));

        lookupItemL.setText("Lookup Item ID:");

        itemNameL.setText("Item Name:");

        itemCatL.setText("Item Category:");

        itemDescL.setText("Item Description:");

        itemQntyL.setText("Item Quantity:");

        findItemIDT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                findItemIDTKeyReleased(evt);
            }
        });

        itemNameT.setEditable(false);
        itemNameT.setBackground(new java.awt.Color(255, 255, 255));

        itemCatT.setEditable(false);
        itemCatT.setBackground(new java.awt.Color(255, 255, 255));

        itemDescT.setEditable(false);
        itemDescT.setColumns(20);
        itemDescT.setRows(5);
        itemDescT.setBorder(null);
        itemDescP.setViewportView(itemDescT);

        itemQnty.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));
        itemQnty.setEnabled(false);
        itemQnty.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                itemQntyStateChanged(evt);
            }
        });
        itemQnty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                itemQntyKeyReleased(evt);
            }
        });

        findItemB.setText("Find");
        findItemB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findItemBActionPerformed(evt);
            }
        });

        addToCartB.setText("Add to cart");
        addToCartB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToCartBActionPerformed(evt);
            }
        });

        itemPriceL.setText("Item Price:");

        itemFoundT.setEditable(false);
        itemFoundT.setBackground(new java.awt.Color(255, 255, 255));
        itemFoundT.setBorder(null);

        itemTotalL.setText("Total Price:");

        itemPriceT.setEditable(false);
        itemPriceT.setBackground(new java.awt.Color(255, 255, 255));

        cartItemsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "#", "Item Name", "Price", "Quantity", "Item Total"
            }
        ));
        cartTableP.setViewportView(cartItemsTable);

        removeItemL.setText("Remove from cart:");

        removeQnty.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));
        removeQnty.setEnabled(false);
        removeQnty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                removeQntyKeyReleased(evt);
            }
        });

        removeItemB.setText("Remove");
        removeItemB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeItemBActionPerformed(evt);
            }
        });

        removeItem2B.setText("Remove item");
        removeItem2B.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeItem2BActionPerformed(evt);
            }
        });

        cartItemsL.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cartItemsL.setText("Cart items:");

        cartTotalL.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cartTotalL.setText("Cart Total price:");

        cartTotalT.setEditable(false);
        cartTotalT.setBackground(new java.awt.Color(255, 255, 255));
        cartTotalT.setBorder(null);

        SaleB.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        SaleB.setText("Perform sale");
        SaleB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaleBActionPerformed(evt);
            }
        });

        cancelSaleB.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cancelSaleB.setText("Cancel sale");
        cancelSaleB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelSaleBActionPerformed(evt);
            }
        });

        logoutB.setText("Logout");
        logoutB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutBActionPerformed(evt);
            }
        });

        backB.setText("Back");
        backB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBActionPerformed(evt);
            }
        });

        itemTotalPriceT.setEditable(false);
        itemTotalPriceT.setBackground(new java.awt.Color(255, 255, 255));

        clearB.setText("Clear");
        clearB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBActionPerformed(evt);
            }
        });

        emptyCart.setText("Empty Cart");
        emptyCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emptyCartActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(itemQntyL)
                            .addComponent(itemDescL)
                            .addComponent(itemTotalL))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(itemDescP)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(itemQnty, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(addToCartB))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(removeQnty, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(removeItemB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(removeItem2B, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(itemTotalPriceT))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(itemNameL)
                                    .addComponent(itemCatL)
                                    .addComponent(itemPriceL))
                                .addGap(34, 34, 34)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(itemNameT, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(itemCatT, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(itemPriceT, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(removeItemL)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(itemFoundT, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lookupItemL)
                                        .addGap(34, 34, 34)
                                        .addComponent(findItemIDT, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(findItemB, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                                    .addComponent(clearB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(0, 4, Short.MAX_VALUE)))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cartTableP, javax.swing.GroupLayout.PREFERRED_SIZE, 513, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cartItemsL, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(emptyCart, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(103, 103, 103)
                        .addComponent(cartTotalL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cartTotalT, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(51, 51, 51))
            .addGroup(layout.createSequentialGroup()
                .addGap(385, 385, 385)
                .addComponent(SaleB)
                .addGap(18, 18, 18)
                .addComponent(cancelSaleB, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(backB, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(logoutB, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lookupItemL)
                            .addComponent(findItemIDT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(findItemB)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(backB)
                            .addComponent(logoutB))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cartItemsL)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(itemFoundT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clearB))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(itemNameL)
                            .addComponent(itemNameT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(itemCatL)
                            .addComponent(itemCatT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(itemPriceL)
                            .addComponent(itemPriceT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(itemDescL)
                            .addComponent(itemDescP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(itemQntyL)
                            .addComponent(itemQnty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addToCartB))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(itemTotalL)
                            .addComponent(itemTotalPriceT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(removeItemL)
                            .addComponent(removeQnty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(removeItemB))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeItem2B))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cartTableP, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(emptyCart)
                            .addComponent(cartTotalL)
                            .addComponent(cartTotalT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SaleB)
                    .addComponent(cancelSaleB))
                .addGap(62, 62, 62))
        );
    }// </editor-fold>//GEN-END:initComponents
    private void initComponents2() {
        try {
            image =ImageIO.read(new File(this.getClass().getClassLoader()
                    .getResource("").getPath()+"Commons\\Sales.jpg"));
        } catch (IOException ex) {
            Logger.getLogger(LoginPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        DB=new SaleDB();
        cart=new ArrayList<>();
        cartTotalT.setText("0.0$");
        item=new InventoryItem();
    }
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        g.drawImage(image, 0,0, this);
    }
    private void logoutBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutBActionPerformed
        mainframe.frameReset();
        mainframe.setCurrentUser(new User());
        mainframe.getContentPane().add(new LoginPanel(mainframe));
        mainframe.getContentPane().revalidate();

    }//GEN-LAST:event_logoutBActionPerformed

    private void backBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBActionPerformed
        mainframe.frameReset();
        mainframe.getContentPane().add(new AccessLevelP(mainframe));
        mainframe.getContentPane().revalidate();
    }//GEN-LAST:event_backBActionPerformed

    private void findItemBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findItemBActionPerformed
        findItem();
    }//GEN-LAST:event_findItemBActionPerformed

    private void itemQntyStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_itemQntyStateChanged
        try{
        price=Double.valueOf(item.getPrice());
        Qnty=Integer.valueOf(itemQnty.getValue().toString());
        }catch (Exception ex){
            price=0.0;
            Qnty=0;     
        }
        totalPrice=price*Qnty;
        itemTotalPriceT.setText(String.valueOf(totalPrice)+"$");
    }//GEN-LAST:event_itemQntyStateChanged

    private void clearBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBActionPerformed
        item=new InventoryItem();
        findItemIDT.setText("");
        itemNameT.setText("");
        itemPriceT.setText("");
        itemDescT.setText("");
        itemCatT.setText("");
        itemFoundT.setText("");
        itemTotalPriceT.setText("");
        removeQnty.setValue(1);
        itemQnty.setValue(1);
        itemQnty.setEnabled(false);
        removeQnty.setEnabled(false);
        
    }//GEN-LAST:event_clearBActionPerformed

    private void addToCartBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToCartBActionPerformed
        if(!item.isEmpty()){
            item.setQty(itemQnty.getValue().toString());
        boolean itemFound=false;
        for(int i=0;i<cart.size();i++){
            if(item.getName().equals(cart.get(i).getName())){
                itemFound=true;
                item.setQty(String.valueOf(Integer.valueOf(cart.get(i).getQty())+
                        Integer.valueOf(item.getQty())));
                cart.remove(i);
                cart.add(item);
            }
        }
        if(!itemFound){
            cart.add(item);
        }
        findItemB.doClick();
        setResultTable(cart);
        }
        
    }//GEN-LAST:event_addToCartBActionPerformed

    private void removeItemBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeItemBActionPerformed
        if(!item.isEmpty()){
            item.setQty(itemQnty.getValue().toString());
            for(int i=0;i<cart.size();i++){
                if(item.getName().equals(cart.get(i).getName())){
                    if(Integer.valueOf(cart.get(i).getQty())>Integer.valueOf(removeQnty.getValue().toString())){
                        item.setQty(String.valueOf(Integer.valueOf(cart.get(i).getQty())-
                            Integer.valueOf(removeQnty.getValue().toString())));
                        cart.remove(i);
                        cart.add(item);
                        break;
                    }else{
                        cart.remove(i);
                        break;
                    }
                }
            }
            findItem();
            removeQnty.setValue(1);
            setResultTable(cart);
        }
    }//GEN-LAST:event_removeItemBActionPerformed

    private void removeItem2BActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeItem2BActionPerformed
        if(!item.isEmpty()){
            for(int i=0;i<cart.size();i++){
            if(item.getName().equals(cart.get(i).getName())){
                cart.remove(i);
            }
        }
        setResultTable(cart);
        removeQnty.setValue(1);
        }
    }//GEN-LAST:event_removeItem2BActionPerformed

    private void cancelSaleBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelSaleBActionPerformed
        if(!cart.isEmpty()){
            int n = JOptionPane.showConfirmDialog(mainframe,"Cancel Sale?"
                        ,"Confimation",JOptionPane.YES_NO_OPTION);
            if(n==0){
                clearB.doClick();
                cart=new ArrayList<>();
                setResultTable(cart);
            }
        }else{
            JOptionPane.showMessageDialog(mainframe, "Cart is empty!", "Message", INFORMATION_MESSAGE);
        }    
    }//GEN-LAST:event_cancelSaleBActionPerformed

    private void emptyCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emptyCartActionPerformed
        cart=new ArrayList<>();
        setResultTable(cart);
    }//GEN-LAST:event_emptyCartActionPerformed

    private void SaleBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaleBActionPerformed
        if(!cart.isEmpty()){
            int n = JOptionPane.showConfirmDialog(mainframe,"Perform Sale?"
                        ,"Confimation",JOptionPane.YES_NO_OPTION);
            if(n==0){
                try {
                    DB.ReduceQnty(cart);
                    cart=new ArrayList<>();
                    setResultTable(cart);
                    clearB.doClick();
                } catch (SQLException ex) {
                    Logger.getLogger(SaleP.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }else{
            JOptionPane.showMessageDialog(mainframe, "Cart is empty!", "Message", INFORMATION_MESSAGE);
        }  
    }//GEN-LAST:event_SaleBActionPerformed

    private void findItemIDTKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_findItemIDTKeyReleased
        if (evt.getKeyCode()==KeyEvent.VK_ENTER){
            findItemB.doClick();
        }
        if (evt.getKeyCode()==KeyEvent.VK_QUOTE){
            findItemIDT.setText(findItemIDT.getText().replaceAll("'", ""));}
    }//GEN-LAST:event_findItemIDTKeyReleased

    private void itemQntyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_itemQntyKeyReleased
        if (evt.getKeyCode()==KeyEvent.VK_ENTER){
            addToCartB.doClick();
        }
    }//GEN-LAST:event_itemQntyKeyReleased

    private void removeQntyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_removeQntyKeyReleased
        if (evt.getKeyCode()==KeyEvent.VK_ENTER){
            removeItemB.doClick();
        }
    }//GEN-LAST:event_removeQntyKeyReleased
    
    private void setResultTable(ArrayList<InventoryItem> cart) {
        cartItemsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [cart.size()][4],
            new String [] {
                "#", "Item Name", "Price","Quantity","Item Total"
            }
        ) );
        double cartTotal=0;
        for(int i=0;i<cart.size();i++){

            cartItemsTable.setValueAt(i+1, i, 0);
            cartItemsTable.setValueAt(cart.get(i).getName(), i, 1);
            cartItemsTable.setValueAt(cart.get(i).getPrice()+"$", i, 2);
            cartItemsTable.setValueAt(cart.get(i).getQty(), i, 3);
            cartItemsTable.setValueAt(String.valueOf(Double.valueOf(cart.get(i).getPrice())*
                    Integer.valueOf(cart.get(i).getQty()))+"$", i, 4);
            cartTotal+=Double.valueOf(cart.get(i).getPrice())*
                    Integer.valueOf(cart.get(i).getQty());
        }
        cartTotalT.setText(String.valueOf(cartTotal)+"$");
    }
    
    private void findItem() {
        item=new InventoryItem();
        if(!findItemIDT.getText().isEmpty())
        {
            try {
                item = DB.eFindItem(findItemIDT.getText().toUpperCase());
                itemNameT.setText(item.getName());
                itemPriceT.setText(item.getPrice()+"$");
                itemDescT.setText(item.getDesc());
                itemCatT.setText(item.getCategory());
                itemFoundT.setText("Item found!");
                itemQnty.setEnabled(true);
                removeQnty.setEnabled(true);
                if(item.getActive().equals("FALSE")){
                    itemFoundT.setText("Item inactive!");
                }
                price=Double.valueOf(item.getPrice());
                Qnty=Integer.valueOf(itemQnty.getValue().toString());
                totalPrice=price*Qnty;
                itemTotalPriceT.setText(String.valueOf(totalPrice)+"$");
                itemQnty.requestFocus();
                
            } catch (SQLException ex) {
                itemFoundT.setText("Item not found!");
                itemNameT.setText("");
                itemPriceT.setText("");
                itemDescT.setText("");
                itemCatT.setText("");
            }
        }else {
            itemNameT.setText("");
            itemPriceT.setText("");
            itemDescT.setText("");
            itemCatT.setText("");
            itemFoundT.setText("Fill in Item ID!");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton SaleB;
    private javax.swing.JButton addToCartB;
    private javax.swing.JButton backB;
    private javax.swing.JButton cancelSaleB;
    private javax.swing.JLabel cartItemsL;
    private javax.swing.JTable cartItemsTable;
    private javax.swing.JScrollPane cartTableP;
    private javax.swing.JLabel cartTotalL;
    private javax.swing.JTextField cartTotalT;
    private javax.swing.JButton clearB;
    private javax.swing.JButton emptyCart;
    private javax.swing.JButton findItemB;
    private javax.swing.JTextField findItemIDT;
    private javax.swing.JLabel itemCatL;
    private javax.swing.JTextField itemCatT;
    private javax.swing.JLabel itemDescL;
    private javax.swing.JScrollPane itemDescP;
    private javax.swing.JTextArea itemDescT;
    private javax.swing.JTextField itemFoundT;
    private javax.swing.JLabel itemNameL;
    private javax.swing.JTextField itemNameT;
    private javax.swing.JLabel itemPriceL;
    private javax.swing.JTextField itemPriceT;
    private javax.swing.JSpinner itemQnty;
    private javax.swing.JLabel itemQntyL;
    private javax.swing.JLabel itemTotalL;
    private javax.swing.JTextField itemTotalPriceT;
    private javax.swing.JButton logoutB;
    private javax.swing.JLabel lookupItemL;
    private javax.swing.JButton removeItem2B;
    private javax.swing.JButton removeItemB;
    private javax.swing.JLabel removeItemL;
    private javax.swing.JSpinner removeQnty;
    // End of variables declaration//GEN-END:variables
    private BufferedImage image;
    private final MainFrame mainframe;
    private SaleDB DB;
    private InventoryItem item;
    private Double price;
    private Integer Qnty;
    private Double totalPrice;
    private ArrayList<InventoryItem> cart;
}
