/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package PosPanels;

import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.*;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import DAOs.InventoryDB;
import pos.InventoryItem;
import pos.User;
import java.io.File;

/**
 *
 * @author Omer
 */
public class InventoryP extends javax.swing.JPanel {
    

    /**
     * Creates new form Inventory
     * @param m
     */
    public InventoryP(MainFrame m) {
        mainframe=m;
        initComponents();
        initComponents2();
    }
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        g.drawImage(image, 0,0, this);}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        numOfUsers = new javax.swing.JLabel();
        lookupIDL = new javax.swing.JLabel();
        lookUpUsers = new javax.swing.JLabel();
        lookupCatL = new javax.swing.JLabel();
        lookupNameL = new javax.swing.JLabel();
        lookupIDT = new javax.swing.JTextField();
        lookupNameT = new javax.swing.JTextField();
        tableP = new javax.swing.JScrollPane();
        resultTable = new javax.swing.JTable();
        itemDescL = new javax.swing.JLabel();
        itemCatL = new javax.swing.JLabel();
        itemFoundT = new javax.swing.JTextField();
        clearFindItemB = new javax.swing.JButton();
        logoutB = new javax.swing.JButton();
        itemQntyT = new javax.swing.JTextField();
        catMenuDDM = new javax.swing.JComboBox();
        addCatB = new javax.swing.JButton();
        itemNameT = new javax.swing.JTextField();
        findItemB = new javax.swing.JButton();
        editItemL = new javax.swing.JLabel();
        itemInfoL = new javax.swing.JLabel();
        itemPriceT = new javax.swing.JTextField();
        addCatT = new javax.swing.JTextField();
        itemQntyL = new javax.swing.JLabel();
        activeB = new javax.swing.JButton();
        itemDescP = new javax.swing.JScrollPane();
        itemDescT = new javax.swing.JTextArea();
        itemPriceL = new javax.swing.JLabel();
        findItemIDT = new javax.swing.JTextField();
        updateItemB = new javax.swing.JButton();
        deactivB = new javax.swing.JButton();
        itemNameL = new javax.swing.JLabel();
        backB = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lookupB = new javax.swing.JButton();
        viewallB = new javax.swing.JButton();
        lookupClearB = new javax.swing.JButton();
        addNewItemB = new javax.swing.JButton();
        numOfItemsT = new javax.swing.JTextField();
        itemUpdatedT = new javax.swing.JTextField();
        itemNewIDT = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        catMenuDDM1 = new javax.swing.JComboBox();
        addItemL = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(1000, 600));
        setPreferredSize(new java.awt.Dimension(1000, 600));

        numOfUsers.setBackground(new java.awt.Color(255, 255, 255));
        numOfUsers.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        numOfUsers.setText("Number of items:");

        lookupIDL.setText("Item ID:");

        lookUpUsers.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lookUpUsers.setText("Look up users");

        lookupCatL.setText("Item Category:");

        lookupNameL.setText("Item Name:");

        lookupIDT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lookupIDTKeyReleased(evt);
            }
        });

        lookupNameT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lookupNameTKeyReleased(evt);
            }
        });

        resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "#", "Item ID", "Name", "Price", "Qnty", "Category"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableP.setViewportView(resultTable);

        itemDescL.setText("Item Description:");

        itemCatL.setText("Item Category:");

        itemFoundT.setEditable(false);
        itemFoundT.setBackground(new java.awt.Color(255, 255, 255));
        itemFoundT.setBorder(null);

        clearFindItemB.setText("Clear");

        logoutB.setText("Logout");
        logoutB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutBActionPerformed(evt);
            }
        });

        itemQntyT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                itemQntyTKeyReleased(evt);
            }
        });

        catMenuDDM.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                catMenuDDMKeyReleased(evt);
            }
        });

        addCatB.setText("Add Cat");
        addCatB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCatBActionPerformed(evt);
            }
        });

        itemNameT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                itemNameTKeyReleased(evt);
            }
        });

        findItemB.setText("Find");
        findItemB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findItemBActionPerformed(evt);
            }
        });

        editItemL.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        editItemL.setText("Edit items:");

        itemInfoL.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        itemInfoL.setText("Item Information");

        itemPriceT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                itemPriceTKeyReleased(evt);
            }
        });

        addCatT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                addCatTKeyReleased(evt);
            }
        });

        itemQntyL.setText("Item Quantity:");

        activeB.setText("Activate");
        activeB.setEnabled(false);
        activeB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activeBActionPerformed(evt);
            }
        });

        itemDescT.setColumns(20);
        itemDescT.setRows(5);
        itemDescT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                itemDescTKeyReleased(evt);
            }
        });
        itemDescP.setViewportView(itemDescT);

        itemPriceL.setText("Item price:");

        findItemIDT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                findItemIDTKeyReleased(evt);
            }
        });

        updateItemB.setText("Update");
        updateItemB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateItemBActionPerformed(evt);
            }
        });

        deactivB.setText("Deactivate");
        deactivB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deactivBActionPerformed(evt);
            }
        });

        itemNameL.setText("Item name:");

        backB.setText("Back");
        backB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBActionPerformed(evt);
            }
        });

        jLabel1.setText("Item ID:");

        lookupB.setText("Find");
        lookupB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lookupBActionPerformed(evt);
            }
        });

        viewallB.setText("View all");
        viewallB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewallBActionPerformed(evt);
            }
        });

        lookupClearB.setText("Clear");
        lookupClearB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lookupClearBActionPerformed(evt);
            }
        });

        addNewItemB.setText("Add new item");
        addNewItemB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewItemBActionPerformed(evt);
            }
        });

        numOfItemsT.setEditable(false);

        itemUpdatedT.setEditable(false);
        itemUpdatedT.setBackground(new java.awt.Color(255, 255, 255));
        itemUpdatedT.setBorder(null);

        itemNewIDT.setEditable(false);

        jLabel2.setText("New ID:");

        catMenuDDM1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                catMenuDDM1KeyReleased(evt);
            }
        });

        addItemL.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        addItemL.setText("Add items:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(tableP, javax.swing.GroupLayout.PREFERRED_SIZE, 536, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(backB, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(logoutB, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(itemDescL)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(itemUpdatedT)
                                .addComponent(itemDescP)))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(itemNameL)
                                            .addComponent(itemPriceL)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(itemQntyL)
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                    .addComponent(itemCatL)
                                                    .addGap(1, 1, 1))))
                                        .addGap(18, 18, 18))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(addItemL)
                                    .addGap(34, 34, 34)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(addNewItemB)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(itemNewIDT)
                                    .addComponent(addCatT)
                                    .addComponent(catMenuDDM, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(itemQntyT)
                                    .addComponent(itemFoundT)
                                    .addComponent(findItemIDT)
                                    .addComponent(itemNameT)
                                    .addComponent(itemPriceT, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(clearFindItemB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(findItemB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(updateItemB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(addCatB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(deactivB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(activeB, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(editItemL))
                .addGap(42, 42, 42))
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lookUpUsers)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lookupIDL)
                        .addComponent(lookupCatL)
                        .addComponent(lookupNameL)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lookupIDT, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                            .addComponent(lookupNameT)
                            .addComponent(catMenuDDM1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lookupB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(viewallB, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                            .addComponent(lookupClearB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(154, 154, 154)
                        .addComponent(itemInfoL, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(numOfUsers)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(numOfItemsT, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(numOfUsers)
                            .addComponent(numOfItemsT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lookUpUsers))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lookupIDL)
                            .addComponent(lookupIDT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lookupB))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lookupCatL)
                            .addComponent(viewallB)
                            .addComponent(catMenuDDM1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lookupNameL)
                            .addComponent(lookupNameT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lookupClearB))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tableP, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(backB)
                            .addComponent(logoutB))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addNewItemB)
                            .addComponent(addItemL))
                        .addGap(18, 18, 18)
                        .addComponent(editItemL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(findItemIDT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(findItemB))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(itemFoundT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clearFindItemB))
                        .addGap(1, 1, 1)
                        .addComponent(itemInfoL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(itemNewIDT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(itemNameL)
                            .addComponent(itemNameT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateItemB))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(itemPriceL)
                            .addComponent(itemPriceT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deactivB))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(itemQntyL)
                            .addComponent(itemQntyT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(activeB))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(itemCatL)
                            .addComponent(catMenuDDM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addCatT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addCatB))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(itemDescL)
                            .addComponent(itemDescP, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(itemUpdatedT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(51, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void initComponents2() {
        DB=new InventoryDB();
        numOfItemsT.setText(DB.numOfItems());
        try {
            image =ImageIO.read(new File(this.getClass().getClassLoader()
                    .getResource("").getPath()+"Commons\\InventoryMgmt.jpg"));
        } catch (IOException ex) {
            Logger.getLogger(LoginPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        ArrayList<String> cat=DB.getCategories();
        catMenuDDM.addItem("");
        catMenuDDM1.addItem("");
        cat.stream().forEach((cat1) -> {
            catMenuDDM.addItem(cat1);
            catMenuDDM1.addItem(cat1);
        });
    }
    private void logoutBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutBActionPerformed
        mainframe.frameReset();
        mainframe.setCurrentUser(new User());
        mainframe.getContentPane().add(new LoginPanel(mainframe));
        mainframe.getContentPane().revalidate();
    }//GEN-LAST:event_logoutBActionPerformed

    private void backBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBActionPerformed
        mainframe.frameReset();
        mainframe.getContentPane().add(new AccessLevelP(mainframe));
        mainframe.getContentPane().revalidate();
    }//GEN-LAST:event_backBActionPerformed

    private void addCatBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCatBActionPerformed
        if(!addCatT.getText().isEmpty()){
            catMenuDDM.addItem(addCatT.getText());
            catMenuDDM1.addItem(addCatT.getText());
            catMenuDDM.setSelectedItem(addCatT.getText());
            addCatT.setText("");
            itemDescT.requestFocus();
        }
    }//GEN-LAST:event_addCatBActionPerformed

    private void lookupBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lookupBActionPerformed
        if(catMenuDDM1.getSelectedItem().toString().isEmpty()&&lookupNameT.getText().isEmpty()&&lookupIDT.getText().isEmpty()){
            setResultTable(0);
        }else setResultTable(lookupNameT.getText(),catMenuDDM1.getSelectedItem().toString(),lookupIDT.getText());
    }//GEN-LAST:event_lookupBActionPerformed

    private void viewallBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewallBActionPerformed
        setResultTable();
        lookupNameT.setText("");
        lookupIDT.setText("");
        catMenuDDM1.setSelectedItem("");
    }//GEN-LAST:event_viewallBActionPerformed

    private void lookupClearBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lookupClearBActionPerformed
        setResultTable(0);
        lookupNameT.setText("");
        catMenuDDM1.setSelectedItem("");
        lookupIDT.setText("");
    }//GEN-LAST:event_lookupClearBActionPerformed

    private void findItemBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findItemBActionPerformed
        if(!findItemIDT.getText().isEmpty())
        {
            try {
                item = DB.eFindItem(findItemIDT.getText().toUpperCase());
                itemNameT.setText(item.getName());
                itemNameT.requestFocus();
                itemPriceT.setText(item.getPrice());
                itemDescT.setText(item.getDesc());
                itemNewIDT.setText(item.getId());
                catMenuDDM.setSelectedItem(item.getCategory());
                itemQntyT.setText(item.getQty());
                itemFoundT.setText("Item found!");
                if(item.getActive().equals("FALSE")){
                    itemUpdatedT.setText("Item inactive!");
                    activeB.setEnabled(true);
                }else{
                itemUpdatedT.setText("");
                }
            } catch (SQLException ex) {
                itemFoundT.setText("Item not found!");
                itemNameT.setText("");
                itemPriceT.setText("");
                itemDescT.setText("");
                itemNewIDT.setText("");
                catMenuDDM.setSelectedItem("");
                itemQntyT.setText("");
                itemUpdatedT.setText("");
            }
        }else {
            itemNameT.setText("");
            itemPriceT.setText("");
            itemDescT.setText("");
            itemNewIDT.setText("");
            catMenuDDM.setSelectedItem("");
            itemQntyT.setText("");
            itemUpdatedT.setText("");
            itemFoundT.setText("Fill in Item ID!");
        }
    }//GEN-LAST:event_findItemBActionPerformed

    private void updateItemBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateItemBActionPerformed
        if(!itemNameT.getText().isEmpty()&&
                !itemNewIDT.getText().isEmpty()&&
                !itemPriceT.getText().isEmpty()&&
                !itemQntyT.getText().isEmpty()&&
                !itemDescT.getText().isEmpty()&&
                isNumeric(itemPriceT.getText())&&
                isNumeric(itemQntyT.getText())&&
                !catMenuDDM.getSelectedItem().equals("")){
            int n = JOptionPane.showConfirmDialog(mainframe,"Are you sure you want to update Item information?"
                    ,"Confimation",JOptionPane.YES_NO_OPTION);
            if(n==0){        
                
                item.setName(itemNameT.getText());
                item.setCategory(catMenuDDM.getSelectedItem().toString());
                item.setPrice(itemPriceT.getText());
                item.setDesc(itemDescT.getText());
                item.setQty(itemQntyT.getText());
                item.setId(itemNewIDT.getText());
                
                
                try {
                    item=DB.updateRec(item,findItemIDT.getText());
                } catch (SQLException ex) {
                    Logger.getLogger(InventoryP.class.getName()).log(Level.SEVERE, null, ex);
                }
                itemUpdatedT.setText("Item updated!");
                itemNewIDT.setText(item.getId());
                findItemIDT.setText(itemNewIDT.getText());
                setResultTable(item.getName(),item.getCategory(),item.getId());
            }
        }else itemUpdatedT.setText("Please fill all fields with valid info!");
    }//GEN-LAST:event_updateItemBActionPerformed

    private void lookupIDTKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lookupIDTKeyReleased
        if (evt.getKeyCode()==KeyEvent.VK_ENTER){
            lookupB.doClick();}
        if (evt.getKeyCode()==KeyEvent.VK_QUOTE){
            lookupIDT.setText(lookupIDT.getText().replaceAll("'", ""));}
        
    }//GEN-LAST:event_lookupIDTKeyReleased

    private void lookupNameTKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lookupNameTKeyReleased
        if (evt.getKeyCode()==KeyEvent.VK_ENTER){
            lookupB.doClick();}
        if (evt.getKeyCode()==KeyEvent.VK_QUOTE){
            lookupNameT.setText(lookupNameT.getText().replaceAll("'", ""));}
    }//GEN-LAST:event_lookupNameTKeyReleased

    private void findItemIDTKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_findItemIDTKeyReleased
        if (evt.getKeyCode()==KeyEvent.VK_ENTER){
            findItemB.doClick();}
        if (evt.getKeyCode()==KeyEvent.VK_QUOTE){
            findItemIDT.setText(findItemIDT.getText().replaceAll("'", ""));}
    }//GEN-LAST:event_findItemIDTKeyReleased

    private void deactivBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deactivBActionPerformed
        if(!itemNameT.getText().isEmpty()&&
                !itemNewIDT.getText().isEmpty()&&
                !itemPriceT.getText().isEmpty()&&
                !itemQntyT.getText().isEmpty()&&
                !itemDescT.getText().isEmpty()&&
                isNumeric(itemPriceT.getText())&&
                isNumeric(itemQntyT.getText())&&
                !catMenuDDM.getSelectedItem().equals("")){

            int n = JOptionPane.showConfirmDialog(mainframe,"Are you sure you want to deactivate item?"
                    ,"Confimation",JOptionPane.YES_NO_OPTION);
            if(n==0){
                try {
                    DB.delRec(itemNewIDT.getText());
                    itemNewIDT.setText("");
                    itemUpdatedT.setText("Item deactivated!");
                    itemNameT.setText("");
                    catMenuDDM.setSelectedItem("");
                    findItemIDT.setText("");
                    itemPriceT.setText("");
                    itemQntyT.setText("");
                    itemDescT.setText("");
                    addCatT.setText("");
                    setResultTable();
                    numOfItemsT.setText(DB.numOfItems());
                    itemFoundT.setText("");
                } catch (SQLException ex) {
                    Logger.getLogger(UserMgmtP.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }else itemUpdatedT.setText("Please fill all fields!");
    }//GEN-LAST:event_deactivBActionPerformed

    private void activeBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_activeBActionPerformed
        int n = JOptionPane.showConfirmDialog(mainframe,"Are you sure you want to activate item?"
                    ,"Confimation",JOptionPane.YES_NO_OPTION);
        if(n==0){
            try {
                DB.activateItem(itemNewIDT.getText());
                itemUpdatedT.setText("Item activated!");
                activeB.setEnabled(false);
                viewallB.doClick();
            } catch (SQLException ex) {
                Logger.getLogger(UserMgmtP.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_activeBActionPerformed

    private void addNewItemBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewItemBActionPerformed
        AddItemFrame addItemFrame = new AddItemFrame(this);
        addItemFrame.setVisible(true);
    }//GEN-LAST:event_addNewItemBActionPerformed

    private void itemNameTKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_itemNameTKeyReleased
        if (evt.getKeyCode()==KeyEvent.VK_QUOTE){
            itemNameT.setText(itemNameT.getText().replaceAll("'", ""));}
        if (evt.getKeyCode()==KeyEvent.VK_ENTER){
            updateItemB.doClick();}
    }//GEN-LAST:event_itemNameTKeyReleased

    private void itemPriceTKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_itemPriceTKeyReleased
        if (evt.getKeyCode()==KeyEvent.VK_QUOTE){
            itemPriceT.setText(itemPriceT.getText().replaceAll("'", ""));}
        if (evt.getKeyCode()==KeyEvent.VK_ENTER){
            updateItemB.doClick();}
    }//GEN-LAST:event_itemPriceTKeyReleased

    private void itemQntyTKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_itemQntyTKeyReleased
        if (evt.getKeyCode()==KeyEvent.VK_QUOTE){
            itemQntyT.setText(itemQntyT.getText().replaceAll("'", ""));}
        if (evt.getKeyCode()==KeyEvent.VK_ENTER){
            updateItemB.doClick();}
    }//GEN-LAST:event_itemQntyTKeyReleased

    private void addCatTKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addCatTKeyReleased
        if (evt.getKeyCode()==KeyEvent.VK_QUOTE){
            addCatT.setText(addCatT.getText().replaceAll("'", ""));}
        if (evt.getKeyCode()==KeyEvent.VK_ENTER){
            addCatB.doClick();}
    }//GEN-LAST:event_addCatTKeyReleased

    private void itemDescTKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_itemDescTKeyReleased
        if (evt.getKeyCode()==KeyEvent.VK_QUOTE){
            itemDescT.setText(itemDescT.getText().replaceAll("'", ""));}
        if (evt.getKeyCode()==KeyEvent.VK_ENTER){
            updateItemB.doClick();}
    }//GEN-LAST:event_itemDescTKeyReleased

    private void catMenuDDM1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_catMenuDDM1KeyReleased
        if (evt.getKeyCode()==KeyEvent.VK_ENTER){
            lookupB.doClick();}
    }//GEN-LAST:event_catMenuDDM1KeyReleased

    private void catMenuDDMKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_catMenuDDMKeyReleased
        if (evt.getKeyCode()==KeyEvent.VK_ENTER){
            updateItemB.doClick();}
    }//GEN-LAST:event_catMenuDDMKeyReleased
    private void setResultTable(int i) {
        resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [0][5],
            new String [] {
                "#","Item ID", "Name", "Price", "Qnty", "Category"
            }
        ) );
    }

    protected void setResultTable(String name, String cat, String id) {
        ArrayList<InventoryItem> items= DB.itemsResult(name, cat, id);
        InventoryItem localItem;
        resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [items.size()][5],
            new String [] {
                "#","Item ID", "Name", "Price", "Qnty", "Category"
            }
        ) );

        for(int i=0;i<items.size();i++){
            localItem=items.get(i);
            resultTable.setValueAt(i+1, i, 0);
            resultTable.setValueAt(localItem.getId(), i, 1);
            resultTable.setValueAt(localItem.getName(), i, 2);
            resultTable.setValueAt(localItem.getPrice(), i, 3);
            resultTable.setValueAt(localItem.getQty(), i, 4);
            resultTable.setValueAt(localItem.getCategory(), i, 5);
        }
        if(items.size()<2){
            findItemIDT.setText(items.get(0).getId());
            findItemB.doClick();
        }
    }
    private void setResultTable(){
        
        ArrayList<InventoryItem> items= DB.itemsResult();
        InventoryItem LocalItem;
        resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [items.size()][5],
            new String [] {
                "#","Item ID", "Name", "Price", "Qnty", "Category"
            }
        ) );

        for(int i=0;i<items.size();i++){
            LocalItem=items.get(i);
            resultTable.setValueAt(i+1, i, 0);
            resultTable.setValueAt(LocalItem.getId(), i, 1);
            resultTable.setValueAt(LocalItem.getName(), i, 2);
            resultTable.setValueAt(LocalItem.getPrice(), i, 3);
            resultTable.setValueAt(LocalItem.getQty(), i, 4);
            resultTable.setValueAt(LocalItem.getCategory(), i, 5);
        }        
    }
    public static boolean isNumeric(String str){  
      try{  
        double d = Double.parseDouble(str);  
      } catch(NumberFormatException e){  
        return false;  
      }  
      return true;  
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton activeB;
    private javax.swing.JButton addCatB;
    private javax.swing.JTextField addCatT;
    private javax.swing.JLabel addItemL;
    private javax.swing.JButton addNewItemB;
    private javax.swing.JButton backB;
    public javax.swing.JComboBox catMenuDDM;
    protected javax.swing.JComboBox catMenuDDM1;
    private javax.swing.JButton clearFindItemB;
    private javax.swing.JButton deactivB;
    private javax.swing.JLabel editItemL;
    private javax.swing.JButton findItemB;
    private javax.swing.JTextField findItemIDT;
    private javax.swing.JLabel itemCatL;
    private javax.swing.JLabel itemDescL;
    private javax.swing.JScrollPane itemDescP;
    private javax.swing.JTextArea itemDescT;
    private javax.swing.JTextField itemFoundT;
    private javax.swing.JLabel itemInfoL;
    private javax.swing.JLabel itemNameL;
    private javax.swing.JTextField itemNameT;
    private javax.swing.JTextField itemNewIDT;
    private javax.swing.JLabel itemPriceL;
    private javax.swing.JTextField itemPriceT;
    private javax.swing.JLabel itemQntyL;
    private javax.swing.JTextField itemQntyT;
    private javax.swing.JTextField itemUpdatedT;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton logoutB;
    private javax.swing.JLabel lookUpUsers;
    private javax.swing.JButton lookupB;
    private javax.swing.JLabel lookupCatL;
    private javax.swing.JButton lookupClearB;
    private javax.swing.JLabel lookupIDL;
    private javax.swing.JTextField lookupIDT;
    private javax.swing.JLabel lookupNameL;
    private javax.swing.JTextField lookupNameT;
    private javax.swing.JTextField numOfItemsT;
    private javax.swing.JLabel numOfUsers;
    private javax.swing.JTable resultTable;
    private javax.swing.JScrollPane tableP;
    private javax.swing.JButton updateItemB;
    private javax.swing.JButton viewallB;
    // End of variables declaration//GEN-END:variables
    private final  MainFrame mainframe;
    private InventoryDB DB;
    private BufferedImage image;
    private InventoryItem item;
    
}
